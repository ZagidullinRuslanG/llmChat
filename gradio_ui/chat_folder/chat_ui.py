from operator import itemgetter
import os
from config import Config as cfg
from prompts.default_prompts import DEFAULT_SYSTEM_PROMPT, GLOSSARY
import torch
from chat_folder.chat_script import *

import gradio as gr


def get_chat_ui():

    msg_box = gr.Textbox(container=False, show_label=False,
                            label="Message",
                            placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...",
                            scale=7,
                            autofocus=True,
                            )

    with gr.Blocks(fill_height=True) as block:
        with gr.Tabs() as tabs:
            with gr.Row():
                with gr.Column(scale=1):
                    header = f"""
                                **LLM**: {cfg.MODEL_PATH.split("/")[-1]}
                                **cuda**: {torch.cuda.is_available()}
                                **gpu**: {torch.cuda.get_device_name(0)}
                                """
                    gr.Markdown(header)
                #     allocMem = gr.Markdown()
                # with gr.Column(scale=1):
                #     button = gr.Button(value="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∏–¥–µ–æ–ø–∞–º—è—Ç—å" , size="sm" , scale=1)
                #     button.click(getAllocMem, outputs=[allocMem])
            with gr.Row():
                with gr.TabItem("–ù–∞—Å—Ç—Ä–æ–π–∫–∏"):
                    update_config_btn = gr.Button(value='–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥')
                    update_config_btn.click()

                    is_dev_md = gr.Markdown(visible=False)
                    sys_prompt = gr.Textbox(label='–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç', value=DEFAULT_SYSTEM_PROMPT)
                    glossary = gr.Textbox(label='–°–ª–æ–≤–∞—Ä—å', value=GLOSSARY)
                    temp = gr.Slider(minimum=0, maximum=1, step=0.05, value=cfg.TEMPERATURE, label='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞')
                    with gr.Blocks(visible=False) as optional:
                        n_nodes_ctx = gr.Slider(minimum=1, maximum=cfg.SIMILARITY_TOP_K+20, step=1, value=cfg.SIMILARITY_TOP_K, label='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞')
                        nodes_help_txt = f"""
                        –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ **Simple Summarize** –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ 23. \n
                        –ü—Ä–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –Ω–æ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –≤–æ–∑–º–æ–∂–Ω–æ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ (–∫–æ–Ω—Ç–µ–∫—Å—Ç –º–æ–¥–µ–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω).
        """
                        nodes_help_md = gr.Markdown(nodes_help_txt)
                        def change_visible(request: gr.Request):
                            user = request.username
                            return (gr.Slider(minimum=0, maximum=cfg.SIMILARITY_TOP_K+20, step=1, value=cfg.SIMILARITY_TOP_K, label='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞', visible=is_user_dev(user)),
                                    gr.Markdown(nodes_help_txt, visible=is_user_dev(user)))
                        block.load(change_visible, inputs=None, outputs=[n_nodes_ctx, nodes_help_md])

                with gr.TabItem("–ß–∞—Ç"):

                    with gr.Blocks(fill_width=True, css=".block  .svelte-12cmxck { height:calc(100vh - 380px)!important; }"):
                    
                        chat = gr.ChatInterface(fn = stream_response, #additional_outputs=[nodes, res_prompt], # only with custom gradio
                            additional_inputs=[temp, sys_prompt, glossary, n_nodes_ctx],
                            title='ERACHAT',
                            submit_btn='–û—Ç–ø—Ä–∞–≤–∏—Ç—å',
                            retry_btn='üîÑ  –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å',
                            undo_btn= 'üîô  –û—Ç–º–µ–Ω–∏—Ç—å',
                            clear_btn='üóëÔ∏è  –û—á–∏—Å—Ç–∏—Ç—å',
                            textbox=msg_box,
                            fill_height= True,
                            examples=[['–ß—Ç–æ —Ç–∞–∫–æ–µ –±—Ä–∏–≥–∞–¥–∞?'], ['–ß—Ç–æ —Ç–∞–∫–æ–µ —Å–∫–≤–∞–∂–∏–Ω–∞?']])
                    
                    
                with gr.TabItem("Context"):
                    embed_timer = gr.Timer(1)

                    embed_log = gr.TextArea(value="Embedding text will be here", label='Context')
                    prompt_log = gr.TextArea(value="Your prompt text will be here", label='Prompt')
                    embed_timer.tick(fn = update_embed_log, inputs=[embed_timer], outputs=[embed_log, prompt_log])


            
        return block
